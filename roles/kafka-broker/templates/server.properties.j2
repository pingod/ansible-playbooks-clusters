########################################################################################################################
## Server Basics
########################################################################################################################

# 节点ID
broker.id={{ broker_id }}

########################################################################################################################
## Socket Server Settings
########################################################################################################################

# 监听网卡与监听端口
listeners=PLAINTEXT://:9092

# 广播地址
advertised.listeners=PLAINTEXT://{{ ansible_host }}:9092

# 协议映射
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# 为接受网络请求和发送网络应答使用的线程数
num.network.threads=3

# 磁盘IO使用的线程数
num.io.threads=8

# 发送缓存字节数 (SO_SNDBUF)
socket.send.buffer.bytes=102400

# 接受缓冲区字节数
socket.receive.buffer.bytes=102400

# 最大单词从socket获取的字节数 (规避OOM)
socket.request.max.bytes=104857600

########################################################################################################################
## Data Basics
########################################################################################################################

# 数据目录 (逗号分隔多个)
log.dirs={{ data_dir }}

# 默认主题分区数
num.partitions=3

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

# 内部使用的主题相关设置
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

########################################################################################################################
## Data Flush Policy
########################################################################################################################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

########################################################################################################################
## Data Retention Policy
########################################################################################################################

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

########################################################################################################################
## Zookeeper
########################################################################################################################

# zookeeper连接
zookeeper.connect={{ zoo_conn }}/kafka

# zookeeper连接超时时间
zookeeper.connection.timeout.ms=18000

########################################################################################################################
##  Group Coordinator Settings
########################################################################################################################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer re-balance.
# The re-balance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
