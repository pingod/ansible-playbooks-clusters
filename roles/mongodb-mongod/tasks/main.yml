- name: create directores for data files
  file:
    path: "{{ item }}"
    state: directory
    owner: mongod
    group: mongod
  with_items:
    - "{{ data_dir }}"

- name: create directores for key files
  file:
    path: "{{ install_dir }}/keys"
    state: directory
    owner: mongod
    group: mongod

- name: copy key files
  copy:
    src: "mongodb.key"
    dest: "{{ install_dir }}/keys/mongodb.key"
    owner: mongod
    group: mongod
    mode: "0400"

- name: create directores for log files
  file:
    path: "{{ item }}"
    state: directory
    owner: mongod
    group: mongod
  with_items:
    - "{{ log_dir }}"

- name: create directores for pid files
  file:
    path: "{{ item }}"
    state: directory
    owner: mongod
    group: mongod
  with_items:
    - "{{ pid_dir }}"

- name: copy tmpfiles recreate configuration file
  template:
    src: tmpfiles.mongodb.conf.j2
    dest: /etc/tmpfiles.d/mongodb.conf
    owner: root
    group: root

- name: create directores for configuration files
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  with_items:
    - "{{ config_dir }}"

- name: copy configuration file for mongod
  template:
    src: mongod.yml.j2
    dest: "{{ config_dir }}/{{ mongod_config_file }}"
    owner: root
    group: root
  notify:
    - restart and enable {{ service_name }} service

- name: copy configuration file for systemctl
  template:
    src: mongod-replica-set.service.j2
    dest: "/lib/systemd/system/{{ service_name }}.service"
    owner: root
    group: root
  notify:
    - call 'sudo systemctl daemon-reload'

- name: copy configuration file for logrotate mongod
  template:
    src: mongod.logrotate.j2
    dest: "/etc/logrotate.d/{{ service_name }}"
    owner: root
    group: root

- name: call 'sudo systemctl daemon-reload'
  shell:
    cmd: "sudo systemctl daemon-reload"
  changed_when: no

- name: start and enable {{ service_name }} service
  service:
    name: "{{ service_name }}"
    state: started
    enabled: yes
